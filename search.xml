<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python_cpp_面经</title>
    <url>/zwjun710.github.io/2020/04/12/python-cpp-%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><a id="more"></a>

<hr>
<h5 id="万物皆可对象"><a href="#万物皆可对象" class="headerlink" title="万物皆可对象"></a>万物皆可对象</h5><p><strong>Python 中的一切都可以赋值给变量或者作为参数传递给函数。</strong> </p>
<p>python的所有对象都有三个特性，第一个是id，每个对象都有一个唯一的身份表示自己，可以通过id()来获取到对应的内存地址；</p>
<p>第二个是type，对象的类型；</p>
<p>第三个是值，对象所标识的数据。</p>
<p>变量在python里可以说是对象的引用，因为变量存储的是对象的地址，通过id来引用对象。</p>
<p>dir()可以返回对象的基本属性和方法</p>
<hr>
<h5 id="Python2-Python3的区别"><a href="#Python2-Python3的区别" class="headerlink" title="Python2 Python3的区别"></a>Python2 Python3的区别</h5><p>1、编码</p>
<p>python2的默认编码是ascii，所以在开头总得写上代码来将编码方式转换为utf8，不然中文就会报错，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>

<p>而python3默认编码就是utf-8，不需要开头写编码方式了。</p>
<p>2、字符串（最大的变化）</p>
<p>python2里面字符串有两个类型，一个是Unicode来表示文本字符串，一个是str来表示字节序列，但是这两个使用起来没有明显的界限，往往就会比较混乱。</p>
<p>python3里面就分别用str表示字符串，用byte表示字节序列，需要写入文本或者网络传输的数据就只接受字节序列。</p>
<p>3、print和input及一些语法的区别</p>
<p>python2里面print并不是一个函数，所以大家print的时候可以写“”，也可以带括号，但是python3里面print就是一个函数，必须带上小括号。</p>
<p>input的话，python2里面是raw_input()，python3里面是input()</p>
<p>4、迭代器</p>
<p>python2里面很多返回列表对象的内置函数和方法，在python3里面都返回类似于迭代器的对象。</p>
<p>还有一些细节上面的区别。</p>
<hr>
<h5 id="Python函数调用传递方式"><a href="#Python函数调用传递方式" class="headerlink" title="Python函数调用传递方式"></a>Python函数调用传递方式</h5><p>C函数调用时是值传递，形参和实参分配不同的内存地址，函数内修改形参不影响实参，如果需要在函数内部修改实参，就传递指针。</p>
<p>python里面</p>
<p>在参数传递时，实参将标签复制给了形参，这个时候形参和实参都是指向同一个对象。</p>
<p>在函数内修改形参，</p>
<p>有可变类型list dict 和不可变类型int float string tuple</p>
<p>对于不可变类型，函数内部修改需要创造新的对象，修改形参的话它的实参不会改变；对于可变类型list dictionary，函数内部修改是直接在原对象上面修改。</p>
<hr>
<h5 id="赋值、深拷贝、浅拷贝"><a href="#赋值、深拷贝、浅拷贝" class="headerlink" title="赋值、深拷贝、浅拷贝"></a>赋值、深拷贝、浅拷贝</h5><p>赋值：两个变量指向内存中的同一个对象</p>
<p>浅拷贝：创建一个新的组合对象，引用原对象中的元素（子对象）</p>
<p><strong>切片操作、工厂操作</strong> ？、copy()等</p>
<p>深拷贝：创建一个新的组合对象，也会拷贝原对象中的子对象</p>
<p>copy模块中的deepcopy</p>
<hr>
<h5 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h5><p>对于操作系统来说，一个任务就是一个进程，比如说打开了一个txt文档；进程内的子任务是线程，比如说可以打印、拼写检查、搜索、打字等等。一个进程至少有一个或者多个线程。</p>
<p>*<em>线程有哪些状态 *</em></p>
<p>新建、就绪、运行、阻塞、死亡</p>
<p>使用start()进入就绪状态</p>
<p>run()进入运行</p>
<p>遇到异常或者任务执行完毕，线程会进入死亡状态</p>
<p><strong>多进程</strong></p>
<p>1、linux里面 fork() 父进程 子进程 返回两次，一个是子进程的返回0 一个是父进程返回子进程id</p>
<p>python的os模块里面的fork()</p>
<p>os.getpid拿到子进程的id os.getppid拿到父进程的id</p>
<p>2、windows里面没有fork，用<strong>multiprocessing</strong>模块，里面的process类可以代表进程对象</p>
<p>3、multiprocessing里面的进程池Pool可以批量创建子进程</p>
<p>4、subprocess模块可以启动子进程，控制子进程的输入输出communicate()</p>
<p><strong>多线程</strong></p>
<p>threading模块</p>
<p>启动一个线程就是把函数传入并创建thread实例，然后调用start（）开始执行</p>
<p>current_thread()函数返回当前线程实例</p>
<p>多线程和多进程的最大不同在于，多进程中同一个变量都各自有一份拷贝在每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以任何一个变量都可以被任何一个线程修改。</p>
<p>为了避免这种现象，加入了线程锁threading.lock()来实现。这样多个线程同时执行该程序，只有一个线程能成功获取锁。</p>
<p>同时因为可能存在多个锁，不同线程持有不同的锁，导致多个线程全部挂起。就只能靠操作系统强制终止。</p>
<p>python自带GIL锁，所以最多只能用到一个核。不是真的多线程</p>
<h6 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h6><p>子进程之间的通信使用multiprocessing的Queue\Pipes等方式交换数据 还有socket</p>
<p>具体怎么操作还没怎么看。。。反正就是queue和pipe</p>
<p>pipe是两个进程一读一写的单双工情况</p>
<p>线程之间通信可以使用queue</p>
<hr>
<h5 id="多线程、多进程"><a href="#多线程、多进程" class="headerlink" title="多线程、多进程"></a>多线程、多进程</h5><p>多进程的最大优点就是稳定性高，一个子进程不会影响到主进程和其他子进程。缺点的话是创造进程的代价比较大，同时进程数也有限。</p>
<p>多线程的优点就是速度可能会比较快，缺点是任何一个线程出现问题就可能回导致整个的进程崩溃。</p>
<hr>
<p>*<em>垃圾回收 *</em></p>
<p>​    python里面垃圾的存在，就像我用class定义了一个类，然后我在函数里面申明了该类的几个实例对象，当这个函数被调用完，结束之后，程序就没有可以引用该函数这几个实例的地方了，因此这几个实例就变成了垃圾对象，也就是所谓的内存垃圾。</p>
<p>​    垃圾回收就是说这些不再使用的内存释放和回收的过程。</p>
<p>​    python有两种机制实现垃圾回收：引用计数、垃圾收集器。</p>
<p>​    引用计数是记录有多少变量引用了该对象，如果对象被直接或者间接赋值给一个变量，对象的计数器就加1，如果变量被删除，或者离开所做的函数，计数减1，当引用计数归零时，代表无任何地方引用该对象，解释器将该对象安全的销毁。但是他有一个缺点时无法及时回收存在循环引用的对象。</p>
<p>​    循环引用就是两个对象互相引用对方，这样引用计数始终为1，就不会对其进行垃圾回收，可能会导致内存泄漏。垃圾回收器使用分代回收算法回收垃圾。分为0代1代2代来处理，</p>
<p>*<em>内存泄漏 *</em></p>
<p>​    如果存在循环引用，并且循环引用的对象定义了_del__方法，就会发生内存泄漏。</p>
<p>​    解决内存泄漏的方法主要是循环引用之后记得解除，或者用弱引用。</p>
<p>​    如果发生了不能回收的情况可以通过gc模块来查看或者sys.getrefcount(obj)来获得对象的引用计数，并根据返回值判断是否泄漏。</p>
<hr>
<p>生成器迭代器</p>
<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p> 迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。 </p>
<p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p>
<p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 </p>
<p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<p>调用一个生成器函数，返回的是一个迭代器对象。</p>
<hr>
<p> xrange range的区别 </p>
<p><a href="http://www.nowamagic.net/academy/tag/xrange" target="_blank" rel="noopener">xrange</a> 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器。</p>
<p> python3里面没有xrange，只有range，但是其实这个功能是python2里的xrange。</p>
<hr>
<p>lambda new init pass 列表 元组 装饰器</p>
<h3 id="算法数据结构"><a href="#算法数据结构" class="headerlink" title="算法数据结构"></a>算法数据结构</h3><h5 id="LRU淘汰算法"><a href="#LRU淘汰算法" class="headerlink" title="LRU淘汰算法"></a>LRU淘汰算法</h5><p>（引申到链表的操作，交换节点位置之类的）</p>
<p>最近最少使用算法 ，先将最近最久未使用的数据淘汰 </p>
<h5 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h5><p>1、程序内存下的堆和栈</p>
<p>C语言里栈由操作系统自主分配释放，用来存放函数的参数值、局部变量，操作方式类似于数据结构中的栈。</p>
<p>堆的申请则是需要malloc free 容易内存泄漏，分配方式类似于链表</p>
<p>2、数据结构中的堆和栈</p>
<p>栈先进后出</p>
<p>堆就是常用的树形结构 特殊的完全二叉树</p>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>快速排序</p>
<p>快速排序，又称划分交换排序。通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都要小，然后再按此方法对两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列 </p>
<p>（1） 从数列中挑选一个元素，称为“基准”</p>
<p>（2） 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以放到任意一边，但一般都统一放到一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区操作</p>
<p>（3）递归的把小于基准值元素的子数列和大于基准值元素的子数列排序</p>
<p>递归的最底部情形，是数列的大小基准值元素的子数列和大于基准值元素的子数列排序</p>
<p>堆排序</p>
<p>　　<strong>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</strong> </p>
<p>　　<strong>a.将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</strong></p>
<p>　　<strong>b.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</strong></p>
<p>　　<strong>c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</strong></p>
<p>链表 树</p>
<p>前序遍历 根左右</p>
<p>中序遍历 左根右</p>
<p>后序遍历 左右根</p>
<p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>
<p>1.一颗树只有一个节点,它的深度是1; </p>
<p>2.二叉树的根节点只有左子树而没有右子树,那么可以判断,二叉树的深度应该是其左子树的深度加1; </p>
<p>3.二叉树的根节点只有右子树而没有左子树,那么可以判断,那么二叉树的深度应该是其右树的深度加1; </p>
<p>4.二叉树的根节点既有右子树又有左子树,那么可以判断,那么二叉树的深度应该是其左右子树的深度较大值加1。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果一棵树只有一个结点，它的深度为1。</span><br><span class="line"></span><br><span class="line">如果根结点只有左子树而没有右子树，那么树的深度应该是其左子树的深度加1；同样如果根结点只有右子树而没有左子树，那么树的深度应该是其右子树的深度加1。计算左子树深度和右子树深度同理（即将当前左或右子树节点看做根节点）。</span><br><span class="line"></span><br><span class="line">如果既有右子树又有左子树，那该树的深度就是其左、右子树深度的较大值加1。</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>引用和指针的区别</p>
<p>虚函数</p>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h5 id="计算机网络7层（5层）的架构"><a href="#计算机网络7层（5层）的架构" class="headerlink" title="计算机网络7层（5层）的架构"></a>计算机网络7层（5层）的架构</h5><p>七层模型也就是OSI</p>
<p>其中高层7654定义了应用程序的功能，下面三层321层主要面向通过网络的端到端，点到点的数据流。</p>
<p>7 应用层 与其它计算机进行通讯的一个应用 HTTP FTP等</p>
<p>6 表示层 定义数据格式及加密 加密 ASCII</p>
<p>5 会话层 如何开始 控制 结束 一个对话 RPC SQL</p>
<p>4 传输层 是否选择差错恢复协议还是无差错 TCP UDP SPX</p>
<p>3 网络层 端到端的包传输 IP IPX</p>
<p>2 数据链路层 单个链路上如何传输数据 ATM FDDI</p>
<p>1 物理层 传输介质特性 Rj45 802.3等</p>
<hr>
<h5 id="TCP协议里面的三次握手和四次握手"><a href="#TCP协议里面的三次握手和四次握手" class="headerlink" title="TCP协议里面的三次握手和四次握手"></a>TCP协议里面的三次握手和四次握手</h5><p>数据传输的时候，应用程序向TCP层发送数据流，TCP就会将接收到的数据流切分成报文段，然后经过层层传递，最终传递给目标节点的TCP层。为了防止丢包TCP协议会在数据包上表有序号，对方收到则发送ACK确认，未收到则重传。</p>
<p>传送前</p>
<p>第一次握手：客户端发送SYN包到服务器，等待服务器确认。ACK=0,SYN=1；</p>
<p>第二次握手：服务器收到SYN，确认，发送SYN+ACK包到客户端。SYN=1;ACK=1;</p>
<p>第三次握手：客户端收到SYN+ACK包，再次发送ACK和SYN到服务器端，建立连接传输数据。</p>
<p>传送后</p>
<p>第一次握手：客户端发送FIN和序号seq=u表示请求关闭；FIN=1</p>
<p>第二次握手：服务端收到FIN=1，发送ACK确认，ack=u+1</p>
<p>第三次握手：服务端传完最后的数据发送FIN=1和ACK=1，序号seq改变，ack不变</p>
<p>第四次握手：客户端收到FIN，发送ACK和seq=u+1，sck=w+1给服务端，这时候服务端进入关闭状态，客户端wait一下之后关闭。</p>
<h5 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h5><p>TCP可靠、稳定，在传输数据之前会有三次握手来建立连接，而且在数据传递时有确认、窗口、重传、拥塞控制机制。传完之后还会断开链接来节约资源</p>
<p>但是慢、效率低，占用资源高，容易被攻击。</p>
<p>UDP快，比TCP稍微安全，没有TCP的握手、确认、窗口、重传等集制，是无状态的传输协议，在传输数据时非常快。但是因为UDP没有上面的一些机制，因此就会在传输数据的时候丢包等。</p>
<hr>
<p>随便说几个物理层和数据链路层的协议</p>
<p>从一个终端发送数据包到另一个终端，分别要给数据加上哪些部分（TCP投、IP头、Mac…）</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><p>察看文件大小</p>
</li>
<li><p>ls -l filename</p>
</li>
<li><p>du -sh</p>
</li>
</ul>
<ul>
<li><p>察看文件多少行</p>
<p>wc -l filename</p>
</li>
<li><p>如何给后台起一个服务</p>
<h3 id="nohup和-amp"><a href="#nohup和-amp" class="headerlink" title="nohup和&amp;"></a>nohup和&amp;</h3></li>
<li><p>grep</p>
<p>文本处理</p>
</li>
<li><p>shell</p>
<p>脚本</p>
</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><p>放平心态，当作一次交流的机会，查漏补缺</p>
<hr>
<p><strong>腾讯后台开发</strong></p>
<p>线程进程</p>
<p>TCP UDP</p>
<p>N+1个数字中有N个两两相等成对出现的数字，只有一个是单独的，请找出这个数字 </p>
<ol>
<li>N+1个数字中有N个两两相等成对出现的数字，只有一个是单独的，请找出这个数字</li>
<li>在N个无序无重复的整数中，找到第K大的数字</li>
</ol>
<p>def quick_sort(list,start,end):</p>
<p>​    if start &gt;= end:</p>
<p>​        return</p>
<p>​    mid = list[start]</p>
<p>​    low = start</p>
<p>​    high = end</p>
<p>​    while low &lt; high:</p>
<p>​        while low &lt; high and list[high] &gt;= mid:</p>
<p>​            high -=1</p>
<p>​        list[low] = list[high]</p>
<p>​        while low &lt; high and list[low] &lt; mid:</p>
<p>​            low += 1</p>
<p>​        list[high] = list[low]</p>
<p>​    list[low] = mid</p>
<p>​    quick_sort(list,start,low -1)</p>
<p>​    quick_sort(list,low+1,end)</p>
<hr>
<p>网易互娱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基于机器学习的AI地形利用研究</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目说明：</span><br><span class="line">本项目希望能够提高AI对地形的识别与利用，通过不断跑图来收集地形、战场环境数据并让AI进行感知，并进一步利用机器学习分析玩家玩家数据让AI学会利用地形进行高效的逃跑、攻击等行为。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">招募要求：</span><br><span class="line">- 熟练使用python，有开发经验；</span><br><span class="line">- 良好的逻辑思维和编程习惯，具备独立解决技术问题的能力；</span><br><span class="line">- 熟悉深度学习的基本原理，并掌握一种主流深度学习框架；</span><br><span class="line">- 有过强化学习实践的优先</span><br><span class="line">- 有一定猫和老鼠手游的经验</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python 数据结构</title>
    <url>/zwjun710.github.io/2020/04/02/python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>yolov3project</title>
    <url>/zwjun710.github.io/2020/03/31/yolov3project/</url>
    <content><![CDATA[<p>主要参考csdn的博客：</p>
<p>yolov3：<a href="https://blog.csdn.net/weixin_42747301/article/details/96636614" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42747301/article/details/96636614</a></p>
<p>显卡：<a href="https://www.cnblogs.com/raina/p/11129130.html" target="_blank" rel="noopener">https://www.cnblogs.com/raina/p/11129130.html</a></p>
<a id="more"></a>

<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>在进行环境配置的时候出现错误是很正常的，请保持平和心态哈哈哈</p>
<p>实在不行就关掉电脑出去散个步回来再装</p>
<p>以上是我的人生经验</p>
<h2 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h2><p>实验室电脑Nvidia titan xp，自己的电脑是MX250</p>
<ol>
<li>查看自己的GPU型号</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>

<p>首先需要安装显卡驱动，建议直接去官网下载而不是命令行，<a href="https://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener">驱动链接</a></p>
<ol>
<li>查看自己的驱动和显卡信息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br><span class="line"></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>

<p>我的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">modalias : pci:v000010DEd00001D13sv00001028sd0000089Cbc03sc02i00</span><br><span class="line"></span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line"></span><br><span class="line">driver   : nvidia-driver-430 - third-party free</span><br><span class="line"></span><br><span class="line">driver   : nvidia-driver-440 - third-party free recommended</span><br><span class="line"></span><br><span class="line">driver   : nvidia-driver-435 - distro non-free</span><br><span class="line"></span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free builtin</span><br></pre></td></tr></table></figure>

<p>如果没装驱动这时候nvidia-smi应该是没内容的</p>
<ol>
<li><p>下载完成后，进行安装，这里记得需要把语言改成English！</p>
<p>首先卸载原来的驱动</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>

<p>禁用nouveau（一定要禁用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf</span><br></pre></td></tr></table></figure>

<p>在最后一行添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure>

<p>保存后终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>结束后重启电脑在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>

<p>没有任何输出表示屏蔽成功</p>
<p>禁用x服务并安装相关工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;lightdm stop</span><br><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure>

<p>安装驱动：</p>
<p>终端进入命令行模式，输入用户名密码登录，cd到驱动下载目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo telinit 3</span><br><span class="line">#回到图形化界面输入 sudo telinit 5</span><br></pre></td></tr></table></figure>

<p>输入命令，这里run文件是你自己的文件，名字太长可以用TAB补全</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">sudo .&#x2F;NVIDIA-Linux-x86_64-430.26.run –no-opengl-files</span><br></pre></td></tr></table></figure>

<p>安装结束后重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>在安装驱动中出现</p>
<blockquote>
<p>The distribution-provided pre-install script filed! Are you sure you want to continue?</p>
</blockquote>
<p>选择 <strong>Continue installation</strong> 继续。<br> 出现</p>
<blockquote>
<p>The CC version check failed:</p>
</blockquote>
<p>选择 <strong>Ignore CC version check</strong></p>
<p>其他的情况可以网上搜一搜</p>
<p>安装完成后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>

<p>出现类似的情况则表示安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sun Jan 5 00:28:09 2020</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.44 Driver Version: 440.44 CUDA Version: 10.2 |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan Temp Perf Pwr:Usage&#x2F;Cap| Memory-Usage | GPU-Util Compute M. |</span><br><span class="line">|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</span><br><span class="line">| 0 GeForce MX250 Off | 00000000:02:00.0 Off | N&#x2F;A |</span><br><span class="line">| N&#x2F;A 59C P0 N&#x2F;A &#x2F; N&#x2F;A | 90MiB &#x2F; 2002MiB | 18% Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes: GPU Memory |</span><br><span class="line">| GPU PID Type Process name Usage |</span><br><span class="line">|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</span><br><span class="line">| 0 1344 G &#x2F;usr&#x2F;lib&#x2F;xorg&#x2F;Xorg 90MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<h2 id="cuda-cudnn"><a href="#cuda-cudnn" class="headerlink" title="cuda cudnn"></a>cuda cudnn</h2><ol>
<li>下载cuda和cudnn</li>
</ol>
<p>cuda:<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>cudnn:<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a></p>
<p>把cudnn安装包和四个补丁全部下载</p>
<ol>
<li>gcc g++降级，cuda需要低版本的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-4.8</span><br><span class="line">sudo apt-get install g++-4.8</span><br><span class="line">cd &#x2F;usr&#x2F;bin</span><br><span class="line">ls -l gcc*</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 7th 3月  20 11:38 &#x2F;usr&#x2F;bin&#x2F;gcc -&gt; gcc-7</span><br></pre></td></tr></table></figure>

<p>表示gcc链接到gcc-7, 需要将它改为链接到gcc-4.8，方法如下: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv gcc gcc.bak #备份</span><br><span class="line">sudo ln -s gcc-4.8 gcc #重新链接</span><br></pre></td></tr></table></figure>

<p>g++同理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv g++ g++.bak</span><br><span class="line">sudo ln -s g++-4.8 g++</span><br></pre></td></tr></table></figure>

<p>在/usr/bin目录下查看gcc和g++版本，4.8表示成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l gcc*</span><br><span class="line">ls -l g++*</span><br></pre></td></tr></table></figure>

<ol>
<li>安装cuda</li>
</ol>
<p>下载好了之后cd到下载目录，运行run文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_9.0.176_384.81_linux.run</span><br></pre></td></tr></table></figure>

<p>然后一路accept或者yes，<strong>在提示是否安装显卡驱动时选择no（因为已经安装过了，否则可能会出现bug）</strong>,<strong>会提示驱动问题 不管他 继续</strong> </p>
<p>接下来安装补丁文件，方法和安装cuda9.0一样： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_9.0.176.1_linux.run</span><br><span class="line"></span><br><span class="line">sudo sh cuda_9.0.176.2_linux.run</span><br><span class="line"></span><br><span class="line">sudo sh cuda_9.0.176.3_linux.run</span><br><span class="line"></span><br><span class="line">sudo sh cuda_9.0.176.4_linux.run</span><br></pre></td></tr></table></figure>

<ol>
<li>配置环境</li>
</ol>
<p>打开.barshrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim ~&#x2F;.barshrc</span><br></pre></td></tr></table></figure>

<p>在最后面加入下面两条语句 ，这里cuda具体的版本是否是9.0根据自己的情况修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;bin$&#123;PATH:+:$&#123;PATH&#125;&#125;      </span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>安装cudnn，同cudn</li>
</ol>
<p>cd到下载目录，解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf cudnn-9.0-linux-x64-v7.1.tgz</span><br></pre></td></tr></table></figure>

<p>把文件copy到cuda里面(cuda版本需要根据自己的修改)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp &#x2F;home&#x2F;**&#x2F;Downloads&#x2F;cuda&#x2F;include&#x2F;cudnn.h    &#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;include</span><br><span class="line">sudo cp &#x2F;home&#x2F;***&#x2F;Downloads&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*    &#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;lib64</span><br><span class="line">sudo chmod a+r &#x2F;home&#x2F;***&#x2F;Downloads&#x2F;cuda&#x2F;include&#x2F;cudnn.h   &#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;lib64&#x2F;libcudnn*</span><br></pre></td></tr></table></figure>

<p>以上就完成了</p>
<ol>
<li>测试cuda是否安装好</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;samples&#x2F;1_Utilities&#x2F;deviceQuery #由自己电脑目录决定</span><br><span class="line"></span><br><span class="line">sudo make</span><br><span class="line"></span><br><span class="line">sudo .&#x2F;deviceQuery</span><br></pre></td></tr></table></figure>

<p>出现一长串说明OK，我的是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;deviceQuery</span><br><span class="line">.&#x2F;deviceQuery Starting...</span><br><span class="line"> </span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"> </span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"> </span><br><span class="line">Device 0: &quot;GeForce MX250&quot;</span><br><span class="line">  CUDA Driver Version &#x2F; Runtime Version          10.2 &#x2F; 9.0</span><br><span class="line">  CUDA Capability Major&#x2F;Minor version number:    6.1</span><br><span class="line">  Total amount of global memory:                 2003 MBytes (2099904512 bytes)</span><br><span class="line">  ( 3) Multiprocessors, (128) CUDA Cores&#x2F;MP:     384 CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            1582 MHz (1.58 GHz)</span><br><span class="line">  Memory Clock rate:                             3004 Mhz</span><br><span class="line">  Memory Bus Width:                              64-bit</span><br><span class="line">  L2 Cache Size:                                 524288 bytes</span><br><span class="line">  Maximum Texture Dimension Size (x,y,z)         1D&#x3D;(131072), 2D&#x3D;(131072, 65536), 3D&#x3D;(16384, 16384, 16384)</span><br><span class="line">  Maximum Layered 1D Texture Size, (num) layers  1D&#x3D;(32768), 2048 layers</span><br><span class="line">  Maximum Layered 2D Texture Size, (num) layers  2D&#x3D;(32768, 32768), 2048 layers</span><br><span class="line">  Total amount of constant memory:               65536 bytes</span><br><span class="line">  Total amount of shared memory per block:       49152 bytes</span><br><span class="line">  Total number of registers available per block: 65536</span><br><span class="line">  Warp size:                                     32</span><br><span class="line">  Maximum number of threads per multiprocessor:  2048</span><br><span class="line">  Maximum number of threads per block:           1024</span><br><span class="line">  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)</span><br><span class="line">  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)</span><br><span class="line">  Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">  Texture alignment:                             512 bytes</span><br><span class="line">  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)</span><br><span class="line">  Run time limit on kernels:                     Yes</span><br><span class="line">  Integrated GPU sharing Host Memory:            No</span><br><span class="line">  Support host page-locked memory mapping:       Yes</span><br><span class="line">  Alignment requirement for Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Supports Cooperative Kernel Launch:            Yes</span><br><span class="line">  Supports MultiDevice Co-op Kernel Launch:      Yes</span><br><span class="line">  Device PCI Domain ID &#x2F; Bus ID &#x2F; location ID:   0 &#x2F; 2 &#x2F; 0</span><br><span class="line">  Compute Mode:</span><br><span class="line">     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"> </span><br><span class="line">deviceQuery, CUDA Driver &#x3D; CUDART, CUDA Driver Version &#x3D; 10.2, CUDA Runtime Version &#x3D; 9.0, NumDevs &#x3D; 1</span><br><span class="line">Result &#x3D; PASS</span><br></pre></td></tr></table></figure>

<p>注意，如果装了很多个版本的cuda，在bashrc里面切换版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><p>参考：<a href="https://blog.csdn.net/weixin_41851439/article/details/88712465" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41851439/article/details/88712465</a> </p>
<p><a href="https://blog.csdn.net/sinat_16577223/article/details/78773506" target="_blank" rel="noopener">https://blog.csdn.net/sinat_16577223/article/details/78773506</a> </p>
<ol>
<li>下载源文件</li>
</ol>
<p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">https://opencv.org/releases.html</a> </p>
<ol>
<li>安装依赖项</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure>

<p>安装时可能会出现错误</p>
<blockquote>
<p>E: Unable to locate package libjasper-dev</p>
</blockquote>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu xenial-security main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libjasper1 libjasper-dev</span><br></pre></td></tr></table></figure>

<ol>
<li>下载好了之后修改opencv的配置文件</li>
</ol>
<p>找到OpenCVDetectCUDA.cmake文件并打开，修改set(HAVE_CUDA 1)为set(HAVE_CUDA 0)<br>这里修改的目的是为了避免后面执行sudo make install出现如下的错误信息。</p>
<blockquote>
<p>nvcc warning : The ‘compute_20’, ‘compute_20’,’sm_21’ architectures are deprecated</p>
</blockquote>
<ol>
<li>编译（python3环境）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D PYTHON_DEFAULT_EXECUTABLE&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3 -D BUILD_opencv_python3&#x3D;ON -D BUILD_opencv_python2&#x3D;OFF ..</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>进入python3</p>
<p>import cv2</p>
<p>无报错即成功</p>
<h1 id="YOLO下载"><a href="#YOLO下载" class="headerlink" title="YOLO下载"></a>YOLO下载</h1><p>创建文件夹，在其中下载YOLO和yolov3的权重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pjreddie&#x2F;darknet</span><br><span class="line">cd darknet</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;pjreddie.com&#x2F;media&#x2F;files&#x2F;yolov3.weights</span><br></pre></td></tr></table></figure>

<p>修改makefile文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit Makefile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GPU&#x3D;1</span><br><span class="line">CUDNN&#x3D;1</span><br><span class="line">OPENCV&#x3D;１ # 如果安装了opencv则改为１</span><br><span class="line">OPENMP&#x3D;0</span><br><span class="line">DEBUG&#x3D;0</span><br><span class="line">...</span><br><span class="line">NVCC&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;bin&#x2F;nvcc # 原为 NVCC &#x3D; nvcc，cuda后面的紧跟自己的cuda版本，如cuda-9.0，cuda-10.0等</span><br></pre></td></tr></table></figure>

<p>yolo主目录下重新make</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>cfg文件夹下的yolov3.cfg修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Testing</span><br><span class="line">batch&#x3D;1</span><br><span class="line">subdivisions&#x3D;1</span><br><span class="line"># Training</span><br><span class="line"># batch&#x3D;64</span><br><span class="line"># subdivisions&#x3D;16</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>完成后测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;darknet detect cfg&#x2F;yolov3.cfg yolov3.weights data&#x2F;dog.jpg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">layer     filters    size              input                output</span><br><span class="line">    0 conv     32  3 x 3 &#x2F; 1   416 x 416 x   3   -&gt;   416 x 416 x  32  0.299 BFLOPs</span><br><span class="line">    1 conv     64  3 x 3 &#x2F; 2   416 x 416 x  32   -&gt;   208 x 208 x  64  1.595 BFLOPs</span><br><span class="line">    .......</span><br><span class="line">  105 conv    255  1 x 1 &#x2F; 1    52 x  52 x 256   -&gt;    52 x  52 x 255  0.353 BFLOPs</span><br><span class="line">  106 detection</span><br><span class="line">truth_thresh: Using default &#39;1.000000&#39;</span><br><span class="line">Loading weights from yolov3.weights...Done!</span><br><span class="line">data&#x2F;dog.jpg: Predicted in 0.029329 seconds.</span><br><span class="line">dog: 99%</span><br><span class="line">truck: 93%</span><br><span class="line">bicycle: 99%</span><br></pre></td></tr></table></figure>

<h1 id="数据集设置"><a href="#数据集设置" class="headerlink" title="数据集设置"></a>数据集设置</h1><p>未完待续</p>
]]></content>
      <tags>
        <tag>Object detection</tag>
      </tags>
  </entry>
  <entry>
    <title>图片标注工具labelimage</title>
    <url>/zwjun710.github.io/2020/03/30/labelimage/</url>
    <content><![CDATA[<h1 id="简单好用的图片标注工具labelimage"><a href="#简单好用的图片标注工具labelimage" class="headerlink" title="简单好用的图片标注工具labelimage"></a>简单好用的图片标注工具labelimage</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>链接: <a href="https://pan.baidu.com/s/1PSf23n0i6EPMKUtqNqsIXQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1PSf23n0i6EPMKUtqNqsIXQ</a> </p>
<p>提取码: 84g8 </p>
<p>下载的文件是编译好的，可执行的labelImg.exe文件。直接将文件放在windows环境下，双击可执行。 win1.8.1可以输出txt类型标记（YOLO用的）。</p>
<p>Linux系统可以参考一些CSDN的博客（如<a href="https://blog.csdn.net/jesse_mx/article/details/53606897" target="_blank" rel="noopener">链接</a> ）或者github的README文档（<a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">链接</a>）。</p>
<a id="more"></a>

<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键内容主要参考了github项目的readme文档，里面内容比较全，这里截取部分比较有帮助的内容。</p>
<p>###Hotkeys</p>
<table>
<thead>
<tr>
<th>Ctrl + u</th>
<th>从一个文件中导入所有的图片</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + r</td>
<td>选择默认的标记存储文件夹</td>
</tr>
<tr>
<td>Ctrl + s</td>
<td>保存</td>
</tr>
<tr>
<td>Ctrl + d</td>
<td>复制粘贴现有的label和框</td>
</tr>
<tr>
<td>Space</td>
<td>将当前图像标记为已验证（自动保存到标记默认文件）</td>
</tr>
<tr>
<td>w</td>
<td>画框</td>
</tr>
<tr>
<td>d</td>
<td>下一张图</td>
</tr>
<tr>
<td>a</td>
<td>上一张图</td>
</tr>
<tr>
<td>del</td>
<td>删除选中框</td>
</tr>
<tr>
<td>Ctrl++</td>
<td>放大</td>
</tr>
<tr>
<td>Ctrl–</td>
<td>缩小</td>
</tr>
<tr>
<td>↑→↓←</td>
<td>移动选中框</td>
</tr>
</tbody></table>
<h3 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h3><p>verify：  </p>
<p>当按下空格键时，用户可以将图像标记为已验证，绿色背景将出现。 这在自动创建数据集时使用，然后用户可以浏览所有图片并标记它们，而不用对其进行注释。  </p>
<p>difficult： </p>
<p>设置为1表示该对象已被注释为“困难”，例如，清晰可见但在不大量使用上下文的情况下很难识别的对象。 根据您的深度神经网络实现，您可以在训练期间包括或排除困难的对象。 </p>
<p>####步骤（PascalVOC）      </p>
<ol>
<li>按照上面的说明进行构建和启动。     </li>
<li>在菜单/文件中单击“更改默认保存的注释文件夹”     </li>
<li>点击“打开目录”     </li>
<li>点击“创建RectBox”     </li>
<li>单击并释放鼠标左键以选择一个区域来标注矩形框     </li>
<li>您可以使用鼠标右键拖动矩形框来复制或移动它 </li>
</ol>
<p>注释将保存到您指定的文件夹中。  </p>
<p>####步骤（YOLO）      </p>
<ol>
<li>在data / predefined_classes.txt中，定义将用于培训的课程列表。  </li>
<li>按照上面的说明进行构建和启动。     </li>
<li>在工具栏中的“保存”按钮下方，单击“ PascalVOC”按钮以切换为YOLO格式。     </li>
<li>您可以使用Open / OpenDIR处理单个或多个图像。</li>
<li>完成单个图像后，单击“保存”。  </li>
</ol>
<p>YOLO格式的txt文件将以与您的图片相同的名称保存在同一文件夹中。名为“ classes.txt”的文件也保存到该文件夹。 “ classes.txt”定义了YOLO标签所引用的类名列表。 </p>
<p>注意：      </p>
<p>您的标签列表在处理图像列表的过程中不得更改。保存图像时，classes.txt也将被更新，而以前的注释将不被更新。     </p>
<p>保存为YOLO格式时，请勿使用“默认类”功能，否则将不会引用该功能。 当保存为YOLO格式时，“ difficult”标志将被丢弃。 </p>
<h2 id="界面示意图"><a href="#界面示意图" class="headerlink" title="界面示意图"></a>界面示意图</h2><p><img src="D:%5Czwj%5CMYBLOG%5Cpublic%5Cimages%5Clabelimage.JPG" alt="labelimage"></p>
]]></content>
      <tags>
        <tag>object detection</tag>
      </tags>
  </entry>
  <entry>
    <title>yolov3</title>
    <url>/zwjun710.github.io/2020/03/29/yolov3/</url>
    <content><![CDATA[<h1 id="YOLO系列原理部分梳理（包含v1-v2-v3）"><a href="#YOLO系列原理部分梳理（包含v1-v2-v3）" class="headerlink" title="YOLO系列原理部分梳理（包含v1/v2/v3）"></a>YOLO系列原理部分梳理（包含v1/v2/v3）</h1><p>​        YOLO（<a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">主页链接</a>）系列是one-stage目标检测算法的典型代表，下面对该系列的原理尽量简洁明了地梳理一下。下一篇会总结YOLO的实际应用。</p>
<p>​        这里首先对one-stage和two-stage做出解释：</p>
<p>​        1、two-stage</p>
<p>​        典型代表R-CNN、Fast RCNN、Faster RCNN、R-FCN、Mask RCNN等。该方法首先输入图像经过主干网络完成特征提取，然后通过RPN（Region proposal network)来产生候选区域，同时也会完成区域的分类，最后通过分类和回归，得到对候选目标类别的判定和目标位置的确定。这里不对RCNN系列展开阐述，后续可能会补充一篇two-stage的内容。</p>
<p>​        2、one-stage</p>
<p>​        典型代表YOLO、SSD、RetinaNet等，该方法通过直接回归物体的类别概率和位置坐标值，并不进行区域建议，直接输入图像，通过主干网络+NMS，输出结果。</p>
<a id="more"></a>

<h1 id="YOLOv1"><a href="#YOLOv1" class="headerlink" title="YOLOv1"></a>YOLOv1</h1><p>​        YOLO（<a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">论文）</a>2016年的CVPR。内容参考了<a href="https://www.cnblogs.com/CZiFan/p/9516504.html" target="_blank" rel="noopener">博客园的一篇翻译文章</a> 。</p>
<p>​        未完待续</p>
<p>​    </p>
]]></content>
      <tags>
        <tag>object detection</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用指南</title>
    <url>/zwjun710.github.io/2020/03/26/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Hexo给出的一些链接：</p>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> </p>
<p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> </p>
<p><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> </p>
<p><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a></p>
<p><a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">hexo文档</a></p>
<a id="more"></a>

<h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><h3 id="生成新的Post"><a href="#生成新的Post" class="headerlink" title="生成新的Post"></a>生成新的Post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
